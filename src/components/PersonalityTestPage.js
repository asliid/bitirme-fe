import React, { useEffect, useState } from "react";
import { fetchQuestions, submitTest, testResult } from "../services/TestService";
import "./PersonalityTestPage.css";
import { useNavigate } from 'react-router-dom';

const PersonalityTestPage = () => {
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [buttonColors, setButtonColors] = useState({});
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [result, setResult] = useState(null);
  const [personalityResult, setPersonalityResult] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showRecommendations, setShowRecommendations] = useState(false);

  const motivationalMessages = [
    "Kendine gÃ¼ven! Her soruyla kariyerin iÃ§in bir adÄ±m atÄ±yorsun.",
    "GerÃ§ekten ne istediÄŸini keÅŸfetme zamanÄ±.",
    "CevaplarÄ±n seni en uygun mesleÄŸe gÃ¶tÃ¼rÃ¼yor.",
    "Her tercih, kiÅŸiliÄŸinin aynasÄ±dÄ±r.",
    "Unutma, kariyer yolculuÄŸu bir maraton.",
    "Ä°Ã§ sesini dinle, o seni doÄŸru yÃ¶nlendirir.",
    "Hayalindeki iÅŸe ulaÅŸmak iÃ§in gÃ¼zel bir adÄ±m attÄ±n.",
    "Kendini ifade etmekten Ã§ekinme, bu test senin iÃ§in!",
    "SabÄ±rlÄ± ol, sonuca adÄ±m adÄ±m yaklaÅŸÄ±yorsun.",
    "Her cevap bir iz bÄ±rakÄ±r, senin izini Ã§iziyoruz."
  ];

  const personalityLabels = {
    "REALISTIC": "GerÃ§ekÃ§i",
    "INVESTIGATIVE": "AraÅŸtÄ±rmacÄ±",
    "ARTISTIC": "Sanatsal",
    "SOCIAL": "Sosyal",
    "ENTERPRISING": "GiriÅŸimci",
    "CONVENTIONAL": "Geleneksel"
  };

  useEffect(() => {
    const getQuestions = async () => {
      try {
        const fetchedQuestions = await fetchQuestions();
        setQuestions(fetchedQuestions);
      } catch (error) {
        console.error("Sorular alÄ±nÄ±rken hata oluÅŸtu:", error);
      }
    };
    getQuestions();
  }, []);

  const handleAnswerChange = (questionId, answer) => {
    setAnswers((prev) => ({ ...prev, [questionId]: answer }));
    setButtonColors((prev) => ({ ...prev, [questionId]: answer }));

    if (currentQuestionIndex < questions.length - 1) {
      setTimeout(() => setCurrentQuestionIndex((prev) => prev + 1), 200);
    }
  };

  const getRecommendations = (personality) => {
    switch (personality?.toUpperCase()) {
      case "REALISTIC":
        return (<><h3>Ã–nerilen Meslekler:</h3><ul><li>Makine MÃ¼hendisi</li><li>Elektrik Teknisyeni</li><li>Ä°nÅŸaat UstasÄ±</li><li>Otomotiv Teknisyeni</li></ul></>);
      case "INVESTIGATIVE":
        return (<><h3>Ã–nerilen Meslekler:</h3><ul><li>Data Scientist</li><li>FizikÃ§i</li><li>Biyomedikal MÃ¼hendisi</li><li>Yapay Zeka UzmanÄ±</li></ul></>);
      case "ARTISTIC":
        return (<><h3>Ã–nerilen Meslekler:</h3><ul><li>Grafik TasarÄ±mcÄ±</li><li>MÃ¼zisyen</li><li>Yazar</li><li>Moda TasarÄ±mcÄ±sÄ±</li></ul></>);
      case "SOCIAL":
        return (<><h3>Ã–nerilen Meslekler:</h3><ul><li>Psikolog</li><li>Ã–ÄŸretmen</li><li>Sosyal Hizmet UzmanÄ±</li><li>DanÄ±ÅŸman</li></ul></>);
      case "ENTERPRISING":
        return (<><h3>Ã–nerilen Meslekler:</h3><ul><li>GiriÅŸimci</li><li>SatÄ±ÅŸ YÃ¶neticisi</li><li>Proje Lideri</li><li>Reklam UzmanÄ±</li></ul></>);
      case "CONVENTIONAL":
        return (<><h3>Ã–nerilen Meslekler:</h3><ul><li>Muhasebeci</li><li>Veri GiriÅŸi UzmanÄ±</li><li>Ä°dari Asistan</li><li>Finans Analisti</li></ul></>);
      default:
        return <p>Ã–neri bulunamadÄ±.</p>;
    }
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      const result = await submitTest(answers);
      setResult(result);
      const personalityData = await testResult();
      setPersonalityResult(personalityData);
    } catch (error) {
      console.error("Test gÃ¶nderilirken hata:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const navigate = useNavigate();
  const currentQuestion = questions[currentQuestionIndex];
  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;

  return (
    <div className="personality-test-container">
      <div className="test-wrapper">
        <h1>KiÅŸilik Testi</h1>
        <div className="other-tests-buttons">
          <button onClick={() => navigate("/personality-test/values")}>âœ¨ DeÄŸerler Testi</button>
          <button onClick={() => navigate("/personality-test/environment")}>ğŸª¨ Ã‡alÄ±ÅŸma OrtamÄ± Testi</button>
          <button onClick={() => navigate("/personality-test/motivation")}>ğŸš€ Motivasyon Testi</button>
        </div>

        {!personalityResult && (
          <>
            <p className="intro-text">
              Bu test, <strong>Holland KiÅŸilik Tipi Teorisi</strong> temel alÄ±narak hazÄ±rlanmÄ±ÅŸtÄ±r ve toplamda <strong>90 sorudan</strong> oluÅŸmaktadÄ±r.
              Ä°lgi alanlarÄ±nÄ±za ve tercihlerinize gÃ¶re en uygun kariyer yollarÄ±nÄ± belirlemenize yardÄ±mcÄ± olur.
            </p>
            <div className="progress-bar-container">
              <div className="progress-bar-fill" style={{ width: `${progress}%` }}></div>
            </div>
            <div className="progress-text">
              Soru {currentQuestionIndex + 1} / {questions.length}
            </div>
            <div className="motivational-box">
              {motivationalMessages[currentQuestionIndex % motivationalMessages.length]}
            </div>
            {questions.length > 0 && currentQuestion && (
              <div className="question-card">
                <p><strong>{currentQuestionIndex + 1}.</strong> {currentQuestion.text}</p>
                <div className="button-group">
                  <button style={{ backgroundColor: buttonColors[currentQuestion.id] === "evet" ? "#218838" : "initial" }} onClick={() => handleAnswerChange(currentQuestion.id, "evet")}>Evet</button>
                  <button style={{ backgroundColor: buttonColors[currentQuestion.id] === "hayÄ±r" ? "#c82333" : "initial" }} onClick={() => handleAnswerChange(currentQuestion.id, "hayÄ±r")}>HayÄ±r</button>
                  <button style={{ backgroundColor: buttonColors[currentQuestion.id] === "fark etmez" ? "#5a6268" : "initial" }} onClick={() => handleAnswerChange(currentQuestion.id, "fark etmez")}>Fark Etmez</button>
                </div>
                <div className="navigation-buttons">
                  <button disabled={currentQuestionIndex === 0} onClick={() => setCurrentQuestionIndex((prev) => prev - 1)}>Ã–nceki</button>
                  <button disabled={currentQuestionIndex === questions.length - 1} onClick={() => setCurrentQuestionIndex((prev) => prev + 1)}>Sonraki</button>
                </div>
                <button className="submit-button" onClick={handleSubmit} disabled={isSubmitting}>
                  {isSubmitting ? "YÃ¼kleniyor..." : "Testi Bitir"}
                </button>
              </div>
            )}
          </>
        )}

        {personalityResult && (
          <>
            <div className="question-card personality-result-card">
              <h2>KiÅŸilik Sonucu</h2>
              <p><strong>KiÅŸilik Tipi:</strong> {personalityLabels[personalityResult.personality?.toUpperCase()] || "TanÄ±msÄ±z"}</p>
              <p><strong>AÃ§Ä±klama:</strong> {personalityResult.personalityDescription}</p>
              {!showRecommendations && (
                <button className="submit-button" style={{ marginTop: '20px' }} onClick={() => setShowRecommendations(true)}>
                  Bu kiÅŸilik tipi iÃ§in Ã¶nerilen meslekleri gÃ¶rmek ister misin?
                </button>
              )}
              {showRecommendations && (
                <>
                  <div className="recommendation-box">{getRecommendations(personalityResult.personality)}</div>
                  <button className="chat-button" onClick={() => navigate("/chatbot")}>
                    Daha fazla Ã¶neri istersen, sohbet asistanÄ±ma sor!
                  </button>
                </>
              )}
            </div>
            <div className="result-buttons">
              <button className="retry-button" onClick={() => window.location.reload()}>Yeniden Testi Yap</button>
              <button className="more-tests-button" onClick={() => navigate("/personality-test")}>DiÄŸer Testleri GÃ¶r</button>
              <button className="chat-button" onClick={() => navigate("/chatbot")}>Kariyer AsistanÄ±yla KonuÅŸ</button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default PersonalityTestPage;
